<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Auto Code Blog</title>
        <link>https://autocode2.github.io/blog/</link>
        <description>Auto Code Blog</description>
        <lastBuildDate>Tue, 29 Oct 2024 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Automatic Coding Tools]]></title>
            <link>https://autocode2.github.io/blog/automatic-coding-tools/</link>
            <guid>https://autocode2.github.io/blog/automatic-coding-tools/</guid>
            <pubDate>Tue, 29 Oct 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[For now this is just an unsorted, incomplete list of tools related to AI-driven coding. I'll hopefully come back to this later:]]></description>
            <content:encoded><![CDATA[<p>For now this is just an unsorted, incomplete list of tools related to AI-driven coding. I'll hopefully come back to this later:</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="ai-code-assistants-and-vs-code-wrappers">AI Code Assistants and VS Code Wrappers<a href="https://autocode2.github.io/blog/automatic-coding-tools/#ai-code-assistants-and-vs-code-wrappers" class="hash-link" aria-label="Direct link to AI Code Assistants and VS Code Wrappers" title="Direct link to AI Code Assistants and VS Code Wrappers">​</a></h3>
<ul>
<li><a href="https://www.tabnine.com/" target="_blank" rel="noopener noreferrer">TabNine</a></li>
<li><a href="https://copilot.github.com/" target="_blank" rel="noopener noreferrer">Copilot</a></li>
<li><a href="https://codeium.com/" target="_blank" rel="noopener noreferrer">Codium</a></li>
<li><a href="https://sourcegraph.com/cody" target="_blank" rel="noopener noreferrer">Cody</a></li>
<li><a href="https://www.cursor.com/" target="_blank" rel="noopener noreferrer">Cursor</a></li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="ai-application-generators">AI Application Generators<a href="https://autocode2.github.io/blog/automatic-coding-tools/#ai-application-generators" class="hash-link" aria-label="Direct link to AI Application Generators" title="Direct link to AI Application Generators">​</a></h3>
<ul>
<li><a href="https://v0.dev/" target="_blank" rel="noopener noreferrer">v0</a></li>
<li><a href="https://replit.com/" target="_blank" rel="noopener noreferrer">Replit</a></li>
<li><a href="https://lovable.dev/gpt-engineer/" target="_blank" rel="noopener noreferrer">GPTEngineer</a></li>
<li><a href="https://bolt.new/" target="_blank" rel="noopener noreferrer">Bolt.new</a></li>
<li><a href="https://www.rapidpages.com/" target="_blank" rel="noopener noreferrer">RapidPages</a> - Design only</li>
<li><a href="http://claude.ai/" target="_blank" rel="noopener noreferrer">Claude Artifacts</a></li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="terminal-based">Terminal Based<a href="https://autocode2.github.io/blog/automatic-coding-tools/#terminal-based" class="hash-link" aria-label="Direct link to Terminal Based" title="Direct link to Terminal Based">​</a></h3>
<ul>
<li><a href="https://aider.chat/" target="_blank" rel="noopener noreferrer">Aider</a></li>
<li><a href="https://gptme.org/" target="_blank" rel="noopener noreferrer">GPTme</a></li>
<li><a href="https://llm.datasette.io/en/stable/" target="_blank" rel="noopener noreferrer">llm.py</a> - More of a llm swiss army knife</li>
</ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Testing the new Sonnet]]></title>
            <link>https://autocode2.github.io/blog/new-sonnet/</link>
            <guid>https://autocode2.github.io/blog/new-sonnet/</guid>
            <pubDate>Thu, 24 Oct 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[Anthropic have just released their latest model, confusing still called sonnet-3.5 (or technically claude-3-5-sonnet-20241022), we'll call it new sonnet.]]></description>
            <content:encoded><![CDATA[<p>Anthropic have just released their latest model, confusing still called sonnet-3.5 (or technically <code>claude-3-5-sonnet-20241022</code>), we'll call it new sonnet.
This model seems to have had quite a major update to it's coding abilities, so lets see how it compares on our react-todo apps.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="basic-todo">Basic Todo<a href="https://autocode2.github.io/blog/new-sonnet/#basic-todo" class="hash-link" aria-label="Direct link to Basic Todo" title="Direct link to Basic Todo">​</a></h2>
<p>See <a href="https://autocode2.github.io/blog/introducing-react-todo/">Introducing React Todo</a> for the prompt.</p>
<p><img decoding="async" loading="lazy" alt="Old Sonnet vs New Sonnet" src="https://autocode2.github.io/assets/images/basic-side-by-side-cde163eaf18369fdb4f7c3f4edd427ab.png" width="2550" height="1248" class="img_ev3q"></p>
<h5 class="anchor anchorWithStickyNavbar_LWe7" id="old-sonnet">Old Sonnet<a href="https://autocode2.github.io/blog/new-sonnet/#old-sonnet" class="hash-link" aria-label="Direct link to Old Sonnet" title="Direct link to Old Sonnet">​</a></h5>
<ul>
<li><a href="https://github.com/autocode2/example-todo/commit/42a36d5dd5c064ad0b7af480d4d6f4c70ae0e715" target="_blank" rel="noopener noreferrer">Generated Code</a></li>
<li><a href="https://autocode2.github.io/autocode-examples/examples/example-todo/blog/2024-08-01-introducing-react-todo/typescript_nextjs_shadcn/sonnet" target="_blank" rel="noopener noreferrer">View the App</a></li>
</ul>
<h5 class="anchor anchorWithStickyNavbar_LWe7" id="new-sonnet">New Sonnet<a href="https://autocode2.github.io/blog/new-sonnet/#new-sonnet" class="hash-link" aria-label="Direct link to New Sonnet" title="Direct link to New Sonnet">​</a></h5>
<ul>
<li><a href="https://github.com/autocode2/example-todo/commit/746b5aaf3744f546ff0c8c7a992cda5d2d6cbaf4" target="_blank" rel="noopener noreferrer">Generated Code</a></li>
<li><a href="https://autocode2.github.io/autocode-examples/examples/example-todo/blog/2024-10-24-new-sonnet/basic/sonnet-v2" target="_blank" rel="noopener noreferrer">View the App</a></li>
</ul>
<p>A nice design improvement. New sonnet has also generated simpler code with a single file implementation.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="fully-featured-todo">Fully Featured Todo<a href="https://autocode2.github.io/blog/new-sonnet/#fully-featured-todo" class="hash-link" aria-label="Direct link to Fully Featured Todo" title="Direct link to Fully Featured Todo">​</a></h2>
<p>See <a href="https://autocode2.github.io/blog/todo-with-more-features/">Todo with more features</a> for the prompt.</p>
<p><img decoding="async" loading="lazy" alt="Old Sonnet vs New Sonnet" src="https://autocode2.github.io/assets/images/fully-featured-side-by-side-c4965130da4e8a9b871c12f611237df5.png" width="2554" height="1302" class="img_ev3q"></p>
<h5 class="anchor anchorWithStickyNavbar_LWe7" id="new-sonnet-1">New Sonnet<a href="https://autocode2.github.io/blog/new-sonnet/#new-sonnet-1" class="hash-link" aria-label="Direct link to New Sonnet" title="Direct link to New Sonnet">​</a></h5>
<ul>
<li><a href="https://github.com/autocode2/example-todo/commit/ef91a71575464dae7d2b64dcd141fe90d6e6db41" target="_blank" rel="noopener noreferrer">Generated Code</a></li>
<li><a href="https://autocode2.github.io/autocode-examples/examples/example-todo/blog/2024-10-24-new-sonnet/fully-featured/sonnet-v2" target="_blank" rel="noopener noreferrer">View the App</a></li>
</ul>
<h5 class="anchor anchorWithStickyNavbar_LWe7" id="old-sonnet-1">Old Sonnet<a href="https://autocode2.github.io/blog/new-sonnet/#old-sonnet-1" class="hash-link" aria-label="Direct link to Old Sonnet" title="Direct link to Old Sonnet">​</a></h5>
<ul>
<li><a href="https://autocode2.github.io/autocode-examples/examples/example-todo/blog/2024-08-14-todo-with-more-features/typescript_nextjs_shadcn/sonnet" target="_blank" rel="noopener noreferrer">View the App</a></li>
<li><a href="https://github.com/autocode2/example-todo/commit/0057b0233f4042afebd4de82838a7d61552d13e1" target="_blank" rel="noopener noreferrer">Generated Code</a></li>
</ul>
<p>Again a significant design improvement. Also the new sonnet doesn't introduce the same type error we had with old sonnet.  The code is fairly closely matched, though the new sonnet extracts the sort and filter logic out into <code>lib/todoUtils.ts</code>.</p>
<h1>Conclusion</h1>
<p>Fairly terrible UI has been the hallmark of the all the models tested so far. The new sonnet is a welcome improvement in this regard, and obviously for Anthropic it makes artifacts a lot more usable.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Understanding LangGraph Types]]></title>
            <link>https://autocode2.github.io/blog/understanding-langgraph-types/</link>
            <guid>https://autocode2.github.io/blog/understanding-langgraph-types/</guid>
            <pubDate>Tue, 15 Oct 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[I often run into difficulties trying to build generic apis on top of LangGraph. The types are quite complex so I needed a reference.]]></description>
            <content:encoded><![CDATA[<p>I often run into difficulties trying to build generic apis on top of LangGraph. The types are quite complex so I needed a reference.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="1-statedefinition-and-channels-the-building-blocks-of-state">1. StateDefinition and Channels: The Building Blocks of State<a href="https://autocode2.github.io/blog/understanding-langgraph-types/#1-statedefinition-and-channels-the-building-blocks-of-state" class="hash-link" aria-label="Direct link to 1. StateDefinition and Channels: The Building Blocks of State" title="Direct link to 1. StateDefinition and Channels: The Building Blocks of State">​</a></h2>
<p>At the heart of LangGraph's state management is the <code>StateDefinition</code>. This is an object that defines the structure of your application's state, where each key represents a piece of state, and the value is a <em>channel</em> that determines how that state is
updated.</p>
<p>A channel in LangGraph is an instance of a class that extends <code>BaseChannel</code>. Different channel types provide different behaviors for updating state. Let's look at some common channel types:</p>
<div class="language-typescript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-typescript codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> LastValue</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> Topic</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> BinaryOperatorAggregate</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> EphemeralValue </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"@langchain/langgraph/channels"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// Define our state structure</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">interface</span><span class="token plain"> </span><span class="token class-name">Ticket</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    id</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">string</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    customer</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">string</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    issue</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">string</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    status</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'open'</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'in_progress'</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'closed'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// Create our state definition with explicit channels</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> TicketSystemState </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    currentTicket</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">LastValue</span><span class="token class-name operator" style="color:#393A34">&lt;</span><span class="token class-name">Ticket</span><span class="token class-name operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    allTickets</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">Topic</span><span class="token class-name operator" style="color:#393A34">&lt;</span><span class="token class-name">Ticket</span><span class="token class-name operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> accumulate</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">true</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ticketCounts</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">BinaryOperatorAggregate</span><span class="token class-name operator" style="color:#393A34">&lt;</span><span class="token class-name">Record</span><span class="token class-name operator" style="color:#393A34">&lt;</span><span class="token class-name">Ticket</span><span class="token class-name punctuation" style="color:#393A34">[</span><span class="token class-name string" style="color:#e3116c">'status'</span><span class="token class-name punctuation" style="color:#393A34">]</span><span class="token class-name punctuation" style="color:#393A34">,</span><span class="token class-name"> </span><span class="token class-name builtin">number</span><span class="token class-name operator" style="color:#393A34">&gt;</span><span class="token class-name punctuation" style="color:#393A34">,</span><span class="token class-name"> Ticket</span><span class="token class-name operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">current</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> newTicket</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token operator" style="color:#393A34">...</span><span class="token plain">current</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">newTicket</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">status</span><span class="token punctuation" style="color:#393A34">]</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">current</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">newTicket</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">status</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">||</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> open</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> in_progress</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> closed</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    lastAction</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">LastValue</span><span class="token class-name operator" style="color:#393A34">&lt;</span><span class="token class-name builtin">string</span><span class="token class-name operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    tempData</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">EphemeralValue</span><span class="token class-name operator" style="color:#393A34">&lt;</span><span class="token class-name builtin">any</span><span class="token class-name operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>In this example:</p>
<ul>
<li><code>LastValue</code> always stores the most recent value.</li>
<li><code>Topic</code> accumulates values over time.</li>
<li><code>BinaryOperatorAggregate</code> allows custom reduction logic.</li>
<li><code>EphemeralValue</code> stores temporary data that's cleared after each step.</li>
</ul>
<p>Each channel type provides different behavior for how state is updated and maintained throughout the execution of your graph.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="2-annotationroot-syntactic-sugar-for-state-definition">2. Annotation.Root: Syntactic Sugar for State Definition<a href="https://autocode2.github.io/blog/understanding-langgraph-types/#2-annotationroot-syntactic-sugar-for-state-definition" class="hash-link" aria-label="Direct link to 2. Annotation.Root: Syntactic Sugar for State Definition" title="Direct link to 2. Annotation.Root: Syntactic Sugar for State Definition">​</a></h2>
<p>While explicitly defining channels gives you fine-grained control, LangGraph provides a more concise way to define state using <code>Annotation.Root</code>. This approach uses type inference and default behaviors to simplify your state definition:</p>
<div class="language-typescript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-typescript codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> Annotation </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"@langchain/langgraph"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> TicketSystemState </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> Annotation</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Root</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    currentTicket</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token generic-function function" style="color:#d73a49">Annotation</span><span class="token generic-function generic class-name operator" style="color:#393A34">&lt;</span><span class="token generic-function generic class-name">Ticket</span><span class="token generic-function generic class-name operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    allTickets</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token generic-function function" style="color:#d73a49">Annotation</span><span class="token generic-function generic class-name operator" style="color:#393A34">&lt;</span><span class="token generic-function generic class-name">Ticket</span><span class="token generic-function generic class-name punctuation" style="color:#393A34">[</span><span class="token generic-function generic class-name punctuation" style="color:#393A34">]</span><span class="token generic-function generic class-name operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token function-variable function" style="color:#d73a49">reducer</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">current</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> newTickets</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">...</span><span class="token plain">current</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">...</span><span class="token plain">newTickets</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token function-variable function" style="color:#d73a49">default</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ticketCounts</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token generic-function function" style="color:#d73a49">Annotation</span><span class="token generic-function generic class-name operator" style="color:#393A34">&lt;</span><span class="token generic-function generic class-name">Record</span><span class="token generic-function generic class-name operator" style="color:#393A34">&lt;</span><span class="token generic-function generic class-name">Ticket</span><span class="token generic-function generic class-name punctuation" style="color:#393A34">[</span><span class="token generic-function generic class-name string" style="color:#e3116c">'status'</span><span class="token generic-function generic class-name punctuation" style="color:#393A34">]</span><span class="token generic-function generic class-name punctuation" style="color:#393A34">,</span><span class="token generic-function generic class-name"> </span><span class="token generic-function generic class-name builtin">number</span><span class="token generic-function generic class-name operator" style="color:#393A34">&gt;&gt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token function-variable function" style="color:#d73a49">reducer</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">current</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> newTicket</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> Ticket</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token operator" style="color:#393A34">...</span><span class="token plain">current</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">newTicket</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">status</span><span class="token punctuation" style="color:#393A34">]</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">current</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">newTicket</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">status</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">||</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token function-variable function" style="color:#d73a49">default</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> open</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> in_progress</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> closed</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    lastAction</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token generic-function function" style="color:#d73a49">Annotation</span><span class="token generic-function generic class-name operator" style="color:#393A34">&lt;</span><span class="token generic-function generic class-name builtin">string</span><span class="token generic-function generic class-name operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    tempData</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token generic-function function" style="color:#d73a49">Annotation</span><span class="token generic-function generic class-name operator" style="color:#393A34">&lt;</span><span class="token generic-function generic class-name builtin">any</span><span class="token generic-function generic class-name operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>This approach is more concise and easier to read.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="3-building-a-stategraph-understanding-the-state-types">3. Building a StateGraph: Understanding the State Types<a href="https://autocode2.github.io/blog/understanding-langgraph-types/#3-building-a-stategraph-understanding-the-state-types" class="hash-link" aria-label="Direct link to 3. Building a StateGraph: Understanding the State Types" title="Direct link to 3. Building a StateGraph: Understanding the State Types">​</a></h2>
<p>Let's create a StateGraph using our TicketSystemState and examine its type:</p>
<div class="language-typescript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-typescript codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> StateGraph</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> </span><span class="token class-name">StateType</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> </span><span class="token class-name">UpdateType</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"@langchain/langgraph"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> ticketSystem </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">StateGraph</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">TicketSystemState</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The type of <code>ticketSystem</code> is quite complex due to TypeScript's type inference. If we were to write it out explicitly, it would look something like this:</p>
<div class="language-typescript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-typescript codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> ticketSystem</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> StateGraph</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">typeof</span><span class="token plain"> TicketSystemState</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">StateType</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token keyword" style="color:#00009f">typeof</span><span class="token plain"> TicketSystemState</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">UpdateType</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token keyword" style="color:#00009f">typeof</span><span class="token plain"> TicketSystemState</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token builtin">string</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">typeof</span><span class="token plain"> TicketSystemState</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">typeof</span><span class="token plain"> TicketSystemState</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Let's break down these type parameters:</p>
<ol>
<li><code>typeof TicketSystemState</code>: This is the state definition.</li>
<li><code>StateType&lt;typeof TicketSystemState&gt;</code>: This represents the actual state shape, derived from the state definition.</li>
<li><code>UpdateType&lt;typeof TicketSystemState&gt;</code>: This represents the shape of partial updates to the state.</li>
<li><code>string</code>: This is the default type for node names.</li>
<li><code>typeof TicketSystemState</code>: This is used for both the input and output state definitions, which are the same as our main state in this case.</li>
</ol>
<p>Now, when we add nodes to our StateGraph, the types of the state and updates are inferred from our state definition:</p>
<div class="language-typescript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-typescript codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">ticketSystem</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">addNode</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"receiveTicket"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">state</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// 'state' is inferred to be StateType&lt;typeof TicketSystemState&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> newTicket</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> Ticket </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  id</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token template-string template-punctuation string" style="color:#e3116c">`</span><span class="token template-string string" style="color:#e3116c">ticket_</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">${</span><span class="token template-string interpolation">Date</span><span class="token template-string interpolation punctuation" style="color:#393A34">.</span><span class="token template-string interpolation function" style="color:#d73a49">now</span><span class="token template-string interpolation punctuation" style="color:#393A34">(</span><span class="token template-string interpolation punctuation" style="color:#393A34">)</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">}</span><span class="token template-string template-punctuation string" style="color:#e3116c">`</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  customer</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"John Doe"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  issue</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Cannot login"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  status</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"open"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// The return type is inferred to be UpdateType&lt;typeof TicketSystemState&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  currentTicket</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> newTicket</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  allTickets</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">newTicket</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  ticketCounts</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> newTicket</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  lastAction</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Received new ticket"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  tempData</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> receivedAt</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">Date</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>In this node function:</p>
<ul>
<li>The <code>state</code> parameter is of type <code>StateType&lt;typeof TicketSystemState&gt;</code>, which includes all the fields we defined in our state.</li>
<li>The return value is of type <code>UpdateType&lt;typeof TicketSystemState&gt;</code>, which is a partial update to our state.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="4-type-safe-node-names-in-stategraph">4. Type-Safe Node Names in StateGraph<a href="https://autocode2.github.io/blog/understanding-langgraph-types/#4-type-safe-node-names-in-stategraph" class="hash-link" aria-label="Direct link to 4. Type-Safe Node Names in StateGraph" title="Direct link to 4. Type-Safe Node Names in StateGraph">​</a></h2>
<p>In addition to type-checking the state, StateGraph also provides type safety for node names. As we add nodes to our graph, TypeScript updates the union type of node names in the StateGraph type. Let's see how this works:</p>
<div class="language-typescript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-typescript codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">ticketSystem</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">addNode</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"receiveTicket"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">state</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// Node logic here...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/* ... */</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">addNode</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"processTicket"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">state</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// Node logic here...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/* ... */</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">addNode</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"closeTicket"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">state</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// Node logic here...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/* ... */</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>After adding these nodes, the type of <code>ticketSystem</code> includes the literal types "receiveTicket", "processTicket", and "closeTicket" in its node name union. The full type now looks like this:</p>
<div class="language-typescript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-typescript codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> ticketSystem</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> StateGraph</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">typeof</span><span class="token plain"> TicketSystemState</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">StateType</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token keyword" style="color:#00009f">typeof</span><span class="token plain"> TicketSystemState</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">UpdateType</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token keyword" style="color:#00009f">typeof</span><span class="token plain"> TicketSystemState</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token string" style="color:#e3116c">"receiveTicket"</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"processTicket"</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"closeTicket"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">typeof</span><span class="token plain"> TicketSystemState</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">typeof</span><span class="token plain"> TicketSystemState</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>This type-checking becomes particularly useful when we add edges:</p>
<div class="language-typescript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-typescript codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">ticketSystem</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">addEdge</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"receiveTicket"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"processTicket"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">addEdge</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"processTicket"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"closeTicket"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>TypeScript will ensure that we're only using node names that we've actually defined. If we try to add an edge with a non-existent node name, we'll get a compile-time error:</p>
<div class="language-typescript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-typescript codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// This would cause a TypeScript error</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ticketSystem</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">addEdge</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"receiveTicket"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"nonExistentNode"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// Error: Argument of type '"nonExistentNode"' is not assignable to parameter of type '"receiveTicket" | "processTicket" | "closeTicket"'.</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>This type safety extends to other methods that use node names, such as <code>addConditionalEdges</code>:</p>
<div class="language-typescript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-typescript codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">ticketSystem</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">addConditionalEdges</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token string" style="color:#e3116c">"processTicket"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">state</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=&gt;</span><span class="token plain"> state</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">currentTicket</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">status </span><span class="token operator" style="color:#393A34">===</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"in_progress"</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">?</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"closeTicket"</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"receiveTicket"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"closeTicket"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"receiveTicket"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>In this case, TypeScript will ensure that:</p>
<ol>
<li>"processTicket" is a valid node name for the first argument.</li>
<li>The function returns a valid node name.</li>
<li>The array in the third argument only contains valid node names.</li>
</ol>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="5-compiling-and-running-the-stategraph">5. Compiling and Running the StateGraph<a href="https://autocode2.github.io/blog/understanding-langgraph-types/#5-compiling-and-running-the-stategraph" class="hash-link" aria-label="Direct link to 5. Compiling and Running the StateGraph" title="Direct link to 5. Compiling and Running the StateGraph">​</a></h2>
<p>Finally, when we compile our graph:</p>
<div class="language-typescript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-typescript codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> compiledGraph </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ticketSystem</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">compile</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The type of <code>compiledGraph</code> is:</p>
<div class="language-typescript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-typescript codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> compiledGraph</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> CompiledStateGraph</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">StateType</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token keyword" style="color:#00009f">typeof</span><span class="token plain"> TicketSystemState</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">UpdateType</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token keyword" style="color:#00009f">typeof</span><span class="token plain"> TicketSystemState</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token string" style="color:#e3116c">"receiveTicket"</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"processTicket"</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"closeTicket"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">typeof</span><span class="token plain"> TicketSystemState</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">typeof</span><span class="token plain"> TicketSystemState</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>This compiled graph is what we actually use to run our workflow:</p>
<div class="language-typescript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-typescript codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> result </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">await</span><span class="token plain"> compiledGraph</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">invoke</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// result is of type StateType&lt;typeof TicketSystemState&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Todo with more features]]></title>
            <link>https://autocode2.github.io/blog/todo-with-more-features/</link>
            <guid>https://autocode2.github.io/blog/todo-with-more-features/</guid>
            <pubDate>Wed, 14 Aug 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[The previous app was too easy for all the models, so I iterated on the prompt until I came up with a more detailed prompt.]]></description>
            <content:encoded><![CDATA[<p>The previous app was too easy for all the models, so I iterated on the prompt until I came up with a more detailed prompt.</p>
<div class="language-markdown codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_Ktv7">App Prompt</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-markdown codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Build a todo app.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Each todo item should have the following properties:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token list punctuation" style="color:#393A34">-</span><span class="token plain"> content</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token list punctuation" style="color:#393A34">-</span><span class="token plain"> status (todo, in progress, complete)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token list punctuation" style="color:#393A34">-</span><span class="token plain"> due date (optional)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token list punctuation" style="color:#393A34">-</span><span class="token plain"> created date, started date (when it was marked as in progress), completed date (when it was marked as complete)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token list punctuation" style="color:#393A34">-</span><span class="token plain"> tags (optional)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token list punctuation" style="color:#393A34">-</span><span class="token plain"> priority (optional)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">The app should have the following features:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token list punctuation" style="color:#393A34">-</span><span class="token plain"> You should be able to see the list of todos.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token list punctuation" style="color:#393A34">-</span><span class="token plain"> You should be able to add a todo, delete a todo and update a todo.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token list punctuation" style="color:#393A34">-</span><span class="token plain"> You should be able to mark a todo as complete.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token list punctuation" style="color:#393A34">-</span><span class="token plain"> You should be able to filter the todos by tags, status, priority, due date, including combinations of these filters.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token list punctuation" style="color:#393A34">-</span><span class="token plain"> You should be able to sort the todos by due date, created date, started date, completed date, priority, status.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token list punctuation" style="color:#393A34">-</span><span class="token plain"> You should be able to search for a todo by content.</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Claude-3-5-sonnet mostly doesn't break a sweat, though we do have to fix a type error to get a production build.</p>
<ul>
<li><a href="https://autocode2.github.io/autocode-examples/examples/example-todo/blog/2024-08-14-todo-with-more-features/typescript_nextjs_shadcn/sonnet" target="_blank" rel="noopener noreferrer">View the App</a></li>
<li><a href="https://github.com/autocode2/example-todo/commit/0057b0233f4042afebd4de82838a7d61552d13e1" target="_blank" rel="noopener noreferrer">Generated Code</a></li>
<li><a href="https://github.com/autocode2/example-todo/commit/66300288caa28d190f76976ff7fa636d415985d1" target="_blank" rel="noopener noreferrer">Manual Fix</a></li>
</ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[The React Todo App]]></title>
            <link>https://autocode2.github.io/blog/introducing-react-todo/</link>
            <guid>https://autocode2.github.io/blog/introducing-react-todo/</guid>
            <pubDate>Thu, 01 Aug 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[Todo apps are a classic example app, here we'll see how a few models fare when trying to implement one in React.]]></description>
            <content:encoded><![CDATA[<p>Todo apps are a classic example app, here we'll see how a few models fare when trying to implement one in React.</p>
<p>The models we're going to use are:</p>
<ul>
<li>haiku (claude-3-haiku-20240307)</li>
<li>sonnet (claude-3-5-sonnet-20240620)</li>
<li>gpt-4o (gpt-4o-2024-05-13)</li>
<li>gpt-4o-mini (gpt-4o-mini-2024-07-18)</li>
</ul>
<p>We're going to run them through 3 initial scenarios:</p>
<ul>
<li>Generate a working app from scratch</li>
<li>Generate a working app from a basic template - create-vite-app</li>
<li>Generate a working app from with a stack of typescript, nextjs and tailwindcss.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="prompts">Prompts<a href="https://autocode2.github.io/blog/introducing-react-todo/#prompts" class="hash-link" aria-label="Direct link to Prompts" title="Direct link to Prompts">​</a></h2>
<p>The setup is purposefully simple for this test. We've configured an agent with <code>create-file</code>, <code>replace-file</code>, and <code>delete-file</code> tools and the following tprompt.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="prompts-and-model-setup">Prompts and Model Setup<a href="https://autocode2.github.io/blog/introducing-react-todo/#prompts-and-model-setup" class="hash-link" aria-label="Direct link to Prompts and Model Setup" title="Direct link to Prompts and Model Setup">​</a></h3>
<div class="language-markdown codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_Ktv7">System Prompt</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-markdown codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">You are an AI coding tool. Help the user with their coding tasks using the tools provided.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">You will be given information about the current project in a </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">Context</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">Context</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"> element.  This will include the full contents of files in the project, using </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">File</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">File</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"> elements.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Use the tools to perform the task. Ensure that the content of files is complete and will run as-is.  Do not leave any placeholders or elide the code. Guess sensible defaults if required.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">You may call multiple tools in a single response.  You may also call the same tool multiple times. Call all the necessary tools to complete the users request.</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="the-app-prompt">The App Prompt<a href="https://autocode2.github.io/blog/introducing-react-todo/#the-app-prompt" class="hash-link" aria-label="Direct link to The App Prompt" title="Direct link to The App Prompt">​</a></h3>
<div class="language-markdown codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_Ktv7">The Prompt</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-markdown codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Build a simple react app which a simple todo app.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token list punctuation" style="color:#393A34">-</span><span class="token plain"> You should be able to add a todo, delete a todo and update a todo.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token list punctuation" style="color:#393A34">-</span><span class="token plain"> You should be able to see a list of todos.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token list punctuation" style="color:#393A34">-</span><span class="token plain"> You should be able to mark a todo as complete.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token list punctuation" style="color:#393A34">-</span><span class="token plain"> You should be able to filter the todos by complete and incomplete.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token list punctuation" style="color:#393A34">-</span><span class="token plain"> You should be able to see the count of complete and incomplete</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="working-from-scratch">Working from scratch<a href="https://autocode2.github.io/blog/introducing-react-todo/#working-from-scratch" class="hash-link" aria-label="Direct link to Working from scratch" title="Direct link to Working from scratch">​</a></h2>
<p>For this test we add the following line to the prompt:</p>
<div class="language-markdown codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-markdown codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Generate an index.html and a src/App.js that will run in a browser without any further steps.</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="haiku">haiku<a href="https://autocode2.github.io/blog/introducing-react-todo/#haiku" class="hash-link" aria-label="Direct link to haiku" title="Direct link to haiku">​</a></h3>
<ul>
<li><a href="https://github.com/autocode2/example-todo/commit/ff728811501645e92030f5b35d43bf75d9a8c0c2" target="_blank" rel="noopener noreferrer">Generated Code</a></li>
<li><a href="https://autocode2.github.io/autocode-examples/examples/example-todo/blog/2024-08-01-introducing-react-todo/no_context/fixed_haiku/" target="_blank" rel="noopener noreferrer">View the App</a></li>
</ul>
<p>haiku doesn't quite create runnable code.  The <code>import</code> statement for react won't work without further configuration, but <a href="https://github.com/autocode2/example-todo/commit/413546131cf8a736d12003cf017465009b2469b4" target="_blank" rel="noopener noreferrer">after a quick fix</a> the app is usable and satisfies all the requirements but it's very ugly.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="sonnet">sonnet<a href="https://autocode2.github.io/blog/introducing-react-todo/#sonnet" class="hash-link" aria-label="Direct link to sonnet" title="Direct link to sonnet">​</a></h3>
<ul>
<li><a href="https://github.com/autocode2/example-todo/commit/83687116cc636f52910ee600eb99963a9bbeb8fe" target="_blank" rel="noopener noreferrer">Generated Code</a></li>
<li><a href="https://autocode2.github.io/autocode-examples/examples/example-todo/blog/2024-08-01-introducing-react-todo/no_context/sonnet/" target="_blank" rel="noopener noreferrer">View the App</a></li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="gpt-4o">gpt-4o<a href="https://autocode2.github.io/blog/introducing-react-todo/#gpt-4o" class="hash-link" aria-label="Direct link to gpt-4o" title="Direct link to gpt-4o">​</a></h3>
<ul>
<li><a href="https://github.com/autocode2/example-todo/commit/557c13ad910fb39a50cdd4c4ab5f513769ccbd14" target="_blank" rel="noopener noreferrer">Generated Code</a></li>
<li><a href="https://autocode2.github.io/autocode-examples/examples/example-todo/blog/2024-08-01-introducing-react-todo/no_context/gpt-4o/" target="_blank" rel="noopener noreferrer">View the App</a></li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="gpt-4o-mini">gpt-4o-mini<a href="https://autocode2.github.io/blog/introducing-react-todo/#gpt-4o-mini" class="hash-link" aria-label="Direct link to gpt-4o-mini" title="Direct link to gpt-4o-mini">​</a></h3>
<ul>
<li><a href="https://github.com/autocode2/example-todo/commit/b1f74c6a0a0105b0151a88ef0de93b47b58a454f" target="_blank" rel="noopener noreferrer">Generated Code</a></li>
<li><a href="https://autocode2.github.io/autocode-examples/examples/example-todo/blog/2024-08-01-introducing-react-todo/no_context/gpt-4o-mini/" target="_blank" rel="noopener noreferrer">View the App</a></li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="create-vite-app">Create Vite App<a href="https://autocode2.github.io/blog/introducing-react-todo/#create-vite-app" class="hash-link" aria-label="Direct link to Create Vite App" title="Direct link to Create Vite App">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="haiku-1">haiku<a href="https://autocode2.github.io/blog/introducing-react-todo/#haiku-1" class="hash-link" aria-label="Direct link to haiku" title="Direct link to haiku">​</a></h3>
<ul>
<li><a href="https://github.com/autocode2/example-todo/commit/28b86896d92d930f5012eb4a1965f2c513466c8c" target="_blank" rel="noopener noreferrer">Generated Code</a></li>
<li><a href="https://autocode2.github.io/autocode-examples/examples/example-todo/blog/2024-08-01-introducing-react-todo/vite_app/haiku" target="_blank" rel="noopener noreferrer">View the App</a></li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="sonnet-1">sonnet<a href="https://autocode2.github.io/blog/introducing-react-todo/#sonnet-1" class="hash-link" aria-label="Direct link to sonnet" title="Direct link to sonnet">​</a></h3>
<ul>
<li><a href="https://github.com/autocode2/example-todo/commit/010ece34bad7102178657048a0214094cf6a3c7b" target="_blank" rel="noopener noreferrer">Generated Code</a></li>
<li><a href="https://autocode2.github.io/autocode-examples/examples/example-todo/blog/2024-08-01-introducing-react-todo/vite_app/sonnet" target="_blank" rel="noopener noreferrer">View the App</a></li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="gpt-4o-mini-1">gpt-4o-mini<a href="https://autocode2.github.io/blog/introducing-react-todo/#gpt-4o-mini-1" class="hash-link" aria-label="Direct link to gpt-4o-mini" title="Direct link to gpt-4o-mini">​</a></h3>
<ul>
<li><a href="https://github.com/autocode2/example-todo/commit/809649c47a2b6cf861a38ecb2909b598141a4d4f" target="_blank" rel="noopener noreferrer">Generated Code</a></li>
<li><a href="https://autocode2.github.io/autocode-examples/examples/example-todo/blog/2024-08-01-introducing-react-todo/vite_app/gpt-4o-mini" target="_blank" rel="noopener noreferrer">View the App</a></li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="gpt-4o-1">gpt-4o<a href="https://autocode2.github.io/blog/introducing-react-todo/#gpt-4o-1" class="hash-link" aria-label="Direct link to gpt-4o" title="Direct link to gpt-4o">​</a></h3>
<ul>
<li><a href="https://github.com/autocode2/example-todo/commit/e59f03e21bf7b01e50f1891b82553c0e8c6cc6f7" target="_blank" rel="noopener noreferrer">Generated Code</a></li>
<li><a href="https://autocode2.github.io/autocode-examples/examples/example-todo/blog/2024-08-01-introducing-react-todo/vite_app/gpt-4o" target="_blank" rel="noopener noreferrer">View the App</a></li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="nextjs-typescript-and-tailwindcss">NextJS, Typescript and TailwindCSS<a href="https://autocode2.github.io/blog/introducing-react-todo/#nextjs-typescript-and-tailwindcss" class="hash-link" aria-label="Direct link to NextJS, Typescript and TailwindCSS" title="Direct link to NextJS, Typescript and TailwindCSS">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="haiku-2">haiku<a href="https://autocode2.github.io/blog/introducing-react-todo/#haiku-2" class="hash-link" aria-label="Direct link to haiku" title="Direct link to haiku">​</a></h3>
<ul>
<li><a href="https://github.com/autocode2/example-todo/commit/9db7ce4769cc0a83f8d240e3d8ce0821a7352c3b" target="_blank" rel="noopener noreferrer">Generated Code</a></li>
<li><a href="https://autocode2.github.io/autocode-examples/examples/example-todo/blog/2024-08-01-introducing-react-todo/typescript_nextjs_shadcn/haiku_use_client_prompt" target="_blank" rel="noopener noreferrer">View the App</a></li>
</ul>
<p>Haiku initially failed to generate a working app, as it was missing the <code>'use client'</code> directive from NextJS 13+.
Adding the following line to the prompt fixed the issue:</p>
<div class="language-markdown codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-markdown codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Note. This is a Nextjs 13+ project, so make sure to use the 'use client' directive appropriately.</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="sonnet-2">sonnet<a href="https://autocode2.github.io/blog/introducing-react-todo/#sonnet-2" class="hash-link" aria-label="Direct link to sonnet" title="Direct link to sonnet">​</a></h3>
<ul>
<li><a href="https://github.com/autocode2/example-todo/commit/42a36d5dd5c064ad0b7af480d4d6f4c70ae0e715" target="_blank" rel="noopener noreferrer">Generated Code</a></li>
<li><a href="https://autocode2.github.io/autocode-examples/examples/example-todo/blog/2024-08-01-introducing-react-todo/typescript_nextjs_shadcn/sonnet" target="_blank" rel="noopener noreferrer">View the App</a></li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="gpt-4o-mini-2">gpt-4o-mini<a href="https://autocode2.github.io/blog/introducing-react-todo/#gpt-4o-mini-2" class="hash-link" aria-label="Direct link to gpt-4o-mini" title="Direct link to gpt-4o-mini">​</a></h3>
<ul>
<li><a href="https://github.com/autocode2/example-todo/commit/3538b78e22f4213ebf1721138597851a967f11ae" target="_blank" rel="noopener noreferrer">Generated Code</a></li>
<li><a href="https://autocode2.github.io/autocode-examples/examples/example-todo/blog/2024-08-01-introducing-react-todo/typescript_nextjs_shadcn/gpt-4o-mini" target="_blank" rel="noopener noreferrer">View the App</a></li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="gpt-4o-2">gpt-4o<a href="https://autocode2.github.io/blog/introducing-react-todo/#gpt-4o-2" class="hash-link" aria-label="Direct link to gpt-4o" title="Direct link to gpt-4o">​</a></h3>
<ul>
<li><a href="https://github.com/autocode2/example-todo/commit/a9c387fd1aa244532dd568e77c94cfabf4529372" target="_blank" rel="noopener noreferrer">Generated Code</a></li>
<li><a href="https://autocode2.github.io/autocode-examples/examples/example-todo/blog/2024-08-01-introducing-react-todo/typescript_nextjs_shadcn/gpt-4o" target="_blank" rel="noopener noreferrer">View the App</a></li>
</ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[The Rise of Automatic Coding]]></title>
            <link>https://autocode2.github.io/blog/the-rise-of-automatic-coding/</link>
            <guid>https://autocode2.github.io/blog/the-rise-of-automatic-coding/</guid>
            <pubDate>Thu, 18 Jul 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[It's pretty clear to anyone paying attention: LLMs can code. This fact is changing how we think about software development.]]></description>
            <content:encoded><![CDATA[<p>It's pretty clear to anyone paying attention: LLMs can code. This fact is changing how we think about software development.</p>
<p>In the auto-code project, I'm exploring just how far we can push LLM coding abilities. I've noticed two main ways AI is being used for coding:</p>
<ol>
<li>
<p>AI-Assisted Coding: This is where professional developers are heading. Tools like GitHub Copilot, and fancier ones like Cursor and Devin are becoming part of a coder's daily life. Even if AI ends up writing most of the code, the human is still in charge.</p>
</li>
<li>
<p>Automated Code Generation: This is for everybody, being able to describe a tool, or an app, or a game and have it built for you is immensely useful.  It won't replace professionally developed software but it's undoubtedly going to be a huge trend in the future (no-code/low-code was already a fast growing sector before it had AI-boosters)</p>
</li>
</ol>
<p>Through this project, I'm trying to figure out what AI can and can't do when it comes to coding. It's pretty exciting to think about where this might lead us in the world of software creation.</p>]]></content:encoded>
            <category>futurology</category>
        </item>
    </channel>
</rss>